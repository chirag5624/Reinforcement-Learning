import os

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm

"""10-armed bandit problem with non-stationary means."""

def run_k_bandit_experiment(num_experiments, num_timesteps, k, eps, alpha=None):
    average_reward = np.zeros(num_timesteps+1)
    for exp in tqdm(range(num_experiments), total=num_experiments):
        action_values = np.full(shape=k, fill_value=np.random.normal(size=1))
        action_value_estimates = np.zeros(k)
        num_steps_per_action = np.zeros(k)

        prob = np.random.random(num_timesteps+1)
        curr_reward = 0
        curr_timestep = 1
        while curr_timestep <= num_timesteps:
            # pick an action
            if prob[curr_timestep] <= (1-eps):
                a = np.argmax(action_value_estimates)
            else:
                a = np.random.randint(k)

            # num_steps_per_action[a] += 1
            # sample reward
            r = action_values[a] + 1*np.random.randn()

            # update selected actions value's estimate
            if alpha is None:
                action_value_estimates[a] = action_value_estimates[a] + (1/num_steps_per_action[a])*(r-action_value_estimates[a])
            else:
                action_value_estimates[a] = action_value_estimates[a] + alpha*(r-action_value_estimates[a])

            # update average reward
            curr_reward = ((curr_timestep-1)*curr_reward + r)/curr_timestep
            average_reward[curr_timestep] += curr_reward

            # update action values randomly
            action_values += np.random.normal(scale=0.01, size=(k,))

            curr_timestep += 1

    average_reward = average_reward/num_experiments
    return average_reward

# problem params
num_experiments = 2000
num_timesteps = 10000
k = 10
eps = 0.1
alpha = 0.1

average_reward_var = run_k_bandit_experiment(num_experiments, num_timesteps, k, eps)
average_reward_fixed = run_k_bandit_experiment(num_experiments, num_timesteps, k, eps, 0.1)

fig, ax = plt.subplots(1, 1, figsize=(10,10))
sns.lineplot(data=average_reward_fixed, color="blue", label="Fixed step-size, alpha={}".format(alpha), ax=ax)
sns.lineplot(data=average_reward_var, color="red", label="Variable step size", ax=ax)
ax.set_xlabel("Number of time steps", fontsize=15)
ax.set_ylabel("Average reward", fontsize=15)
plt.show()
